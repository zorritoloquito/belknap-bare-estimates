import { pgTable, serial, integer, text, timestamp, boolean, uuid, numeric, date, varchar, jsonb } from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';
import { customers } from './customers';
import { jobs } from './jobs';
import { users } from './auth';
import { CalculatedEstimateValues } from '@/lib/types';

export const estimates = pgTable('estimates', {
  id: serial('id').primaryKey(),
  estimateNumber: text('estimate_number').unique(), // Changed to text, will be populated by sequence
  customerId: integer('customer_id').references(() => customers.id, { onDelete: 'cascade' }).notNull(),
  jobId: integer('job_id').references(() => jobs.id, { onDelete: 'cascade' }).notNull(), // Assuming an estimate is always for a specific job
  userId: uuid('user_id').references(() => users.id, { onDelete: 'set null' }), // User who created the estimate

  estimateDate: date('estimate_date').defaultNow().notNull(),
  terms: text('terms').default('Due on receipt'), // Default from plan
  
  // Placeholders for "Step 1 of the spec" inputs - to be detailed later
  gpm: numeric('gpm'), // Example
  pumpSetting: integer('pump_setting'), // Example
  pwlDeterminationMethod: text('pwl_determination_method'), // Renamed from pwl_input_method
  pwlDirectInput: numeric('pwl_direct_input'), // Renamed from pwl_direct
  gpmt: numeric('gpmt'), // Example
  pwlt: numeric('pwlt'), // Example
  swl: numeric('swl'), // Example
  psi: integer('psi'), // Example
  voltageMapped: integer('voltage_mapped'), // Renamed from voltage, stores the mapped voltage
  laborPrepJobHours: numeric('labor_prep_job_hours'),
  laborInstallPumpHours: numeric('labor_install_pump_hours'),
  laborStartupHours: numeric('labor_startup_hours'),
  dischargePackage: varchar('discharge_package', {length: 1}), // A, B, or C

  // Placeholders for "generated values" - to be detailed later
  calculatedTdh: numeric('calculated_tdh'), // Example
  calculatedHp: numeric('calculated_hp'), // Example
  selectedMotorHp: numeric('selected_motor_hp'), // Example
  selectedWireSize: text('selected_wire_size'), // Example
  selectedPumpDescription: text('selected_pump_description'), // Example

  salesTaxRateType: text('sales_tax_rate_type').notNull(), // Added: 'standard' or 'reduced'
  salesTaxRatePercentage: numeric('sales_tax_rate_percentage', { precision: 5, scale: 2 }).notNull(), // e.g., 2.75 or 7.75
  laborDiscount: numeric('labor_discount', { precision: 10, scale: 2 }), // Added
  materialDiscount: numeric('material_discount', { precision: 10, scale: 2 }), // Added
  includeTermsAndConditions: boolean('include_terms_and_conditions').default(true).notNull(),
  status: varchar('status', { length: 50 }).default('Draft').notNull(), // e.g., 'Draft', 'Approved', 'Sent'
  
  // Snapshot of calculation results used at the time of estimate creation
  calculationResultsSnapshot: jsonb('calculation_results_snapshot').$type<CalculatedEstimateValues>(),

  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull(),
});

// Zod schemas for validation
export const insertEstimateSchema = createInsertSchema(estimates).omit({
  id: true, // Omit 'id' as it is auto-generated (serial)
  estimateNumber: true, // Omit 'estimateNumber' as it is generated by a database trigger
  estimateDate: true, // Omit 'estimateDate' as it has defaultNow()
  terms: true, // Omit 'terms' as it has a default value
  includeTermsAndConditions: true, // Omit as it has a default value
  status: true, // Omit as it has a default value
  createdAt: true, // Omit as it has defaultNow()
  updatedAt: true // Omit as it has defaultNow()
});
export const selectEstimateSchema = createSelectSchema(estimates);

// Example of how relations might be defined later:
// import { relations } from 'drizzle-orm';
// export const estimatesRelations = relations(estimates, ({ one, many }) => ({
//   customer: one(customers, { fields: [estimates.customerId], references: [customers.id] }),
//   job: one(jobs, { fields: [estimates.jobId], references: [jobs.id] }),
//   user: one(users, { fields: [estimates.userId], references: [users.id] }),
//   lineItems: many(estimateLineItems) // define estimateLineItems first
// })); 